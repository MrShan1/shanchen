# 语法比较简单，采用缩进方式，如

# print absolute value of an integer:
a = 100
if a >= 0:
    print a
else:
    print -a

# 缩进:
# 不要混合使用制表符和空格来缩进，因其跨平台无法正常工作。
# 最好每个缩进层次使用单个制表符或者两个空格或四个空格这三种风格之一
# 注释:
# # 单行注释
# """（三个英文引号）多行注释
# 命名：
# 变量名必须是大小写英文、数字和_的组合，且不能用数字开头，大小写敏感


# 输入和输出
print 'hello, world'
print 'The quick brown fox', 'jumps over', 'the lazy dog'  # 遇到逗号“,”会输出一个空格
print 300
print 100 + 200
print '100 + 200 =', 100 + 200
logFile = open('myLogFile.txt', 'a')              # 打开文件
print >> logFile, 'Python让程序员的工作更轻松。'  # >> 重定向输出符号
logFile.close()                                   # 关闭文件


name = raw_input()   # 读取的内容永远以字符串的形式返回
print name, type(name)

name = raw_input('please enter your name: ')
print 'hello,', name
age = int(raw_input('age: '))
print 'age:', age, type(age)


# 数据类型
# 整数 int  long
print -128, type(-128)
print 0x80, type(0x80)
print 12345678902010L, type(12345678902010L)
print -0xABCDEF123456L, type(-0xABCDEF123456L)
# 浮点数 float
print 3.1415926, type(3.1415926)
print -1.2e-14, type(-1.2e-14)
print 10., type(10.)
# 复数 complex
print 6.54+3.21j, type(6.54+3.21j)
print -0.142857+0j, type(-0.142857+0j)
print 10/3, 10./3                    # 因内部存储方式不同，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差
print -2 * 3 + 2010 // 4 ** 2        # 标准算术操作符：+  -  *  /  //取整  %取余  **乘方
print (-2 * 3) + (2010 // (4 ** 2))  # 括号增加可读性
# 字符串
print 'I\'m ok.'                  # 转义字符\
print 'I\'m \"OK\"!'
print 'I\'m learning\nPython.'    # \n表示换行，\t表示制表符
print '\\\n\\'                    # 字符\本身也要转义
print '\\\t\\'
print r'\\\t\\'                   # 用r''表示''内部的字符串默认不转义
print '''line1
... line2
... line3'''                      # 用'''...'''的格式表示多行内容
print '123456'[0], '123456'[-1]   # []索引操作符
print '01234'+'56789'             # +连接运算
print '*'*20                      # *重复运算
# 布尔值
print True, type(True), False, type(False)      # 请注意大小写
print 3 > 2, 3 <= 2, 3==2, 3!=2                 # 标准比较操作符：<  <=  >  >=  ==  !=  <>  
print True and False, True or False, not True   # 用and、or和not运算
print ((2 < 4) and (2 == 4)) or (not (3 < 4 < 5)) 
# 空值
print None, type(None)
# 变量
pptname = "Introction to Python" # 无须声明类型
pptName = "Python入门"\
          "续行示例"             # 用’\’作为续行符
print pptname, type(pptname), pptName, type(pptName)
height, age = 1.71, 26    # 一次赋多值
a = True         # a是布尔值
print a, type(a)
a = 123          # a是整数
print a, type(a)
a = 'ABC'        # a变为字符串
print a, type(a)
b, a = a, 'XYZ'  # 把变量b指向变量a所指向的数据
print a, b
# 常量
PI = 3.14159265359  # PI仍是一个变量，Python无机制保证PI不会被改变，变量名全部大写只是一个习惯上的用法



# 字符串和编码
# ASCII-->>GB2312 Shift_JIS Euc-kr-->>Unicode-->>UTF-8
# ASCII编码是1个字节，而Unicode编码通常是2个字节，非常偏僻的字符，需要4个字节
# UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，
# 常用的英文字母被编码成1个字节，汉字通常是3个字节，很生僻的字符被编码成4-6个字节
# 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
print u'中文'
u'中文'
u'ABC'.encode('utf-8'), u'中文'.encode('utf-8')
'abc'.decode('utf-8'),'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
len(u'ABC'),len('ABC'),len(u'中文'),len('\xe4\xb8\xad\xe6\x96\x87')
# 当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
# 第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
# 没有特殊业务要求，请牢记仅使用Unicode和UTF-8这两种编码方式
# 格式化
# 常见的占位符有： %d 整数  %f 浮点数  %s 字符串  %x 十六进制整数
print 'Hi, %s, you have $%d.' % ('Michael', 1000000)
print '%2d-%02d' % (3, 1), '%.2f' % 3.1415926  # 格式化整数和浮点数还可以指定是否补0和整数与小数的位数
print 'Age: %s. Gender: %s' % (25, True)       # %s永远起作用，它会把任何数据类型转换为字符串
print u'Hi, %s' % u'Michael'                   # 对于Unicode字符串，但最好确保替换的字符串也是Unicode字符串
print 'growth rate: %d %%' % 7                 # 转义，用%%来表示一个%


# 使用list和tuple
classmates = ['Michael', 'Bob', 'Tracy']
print classmates, len(classmates)
print classmates[0], classmates[1], classmates[2]
print classmates[3]
print classmates[-1], classmates[-2], classmates[-3]
print classmates[-4]
print classmates
classmates.append('Adam')       # 往list中追加元素到末尾
classmates.insert(1, 'Jack')    # 把元素插入到指定的位置
classmates.pop()                # 删除list末尾的元素
classmates.pop(1)               # 删除指定位置的元素
classmates[1] = 'Sarah'         # 把某个元素替换成别的元素
L = ['Apple', 123, True]
s = ['python', 'java', ['asp', 'php'], 'scheme']
print len(s), type(s[2]), len(s[2])
L = []
print L, len(L)

classmates = ('Michael', 'Bob', 'Tracy')  # 指向不变，一旦初始化就不能修改
t = (1, 2)
t = ()
t = (1)                                   # tuple的陷阱
t = (1,)                                  # 只有1个元素的tuple定义时必须加一个逗号,，来消除歧义
print t, type(t)
t = ('a', 'b', ['A', 'B'])                # “可变的”tuple
t[2][0], t[2][1] = 'X', 'Y'               # 指向不变
print t, type(t)


# 使用dict和set
d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
print d, d['Michael']
d['Adam'] = 67
d['Jack'] = 90
d['Jack'] = 100                                             # 多次对一个key放入value，后面的值会把前面的值冲掉
d['Thomas']
print 'Thomas' in d, d.get('Thomas'), d.get('Thomas', -1)   # 避免key不存在的错误
d.pop('Bob')
d[1] = 'a int'
d[1.6] = 'a float'
d[[1, 2, 3]] = 'a list'
d[(1, 2, 3)] = 'a tuple'
d[(1, 2, [1, 2])] = 'a tuple containing the list'
# dict内部存放的顺序和key放入的顺序是没有关系的
# dict的key必须是不可变对象，如字符串、整数等，而list是可变的，就不能作为key
# 和list比较，dict有以下几个特点：
# 查找和插入的速度极快，不会随着key的增加而增加；
# 需要占用大量的内存，内存浪费多。
# 而list相反：
# 查找和插入的时间随着元素的增加而增加；
# 占用空间小，浪费内存很少
s = set([1, 2, 3])             # set和dict的唯一区别仅在于没有存储对应的value
s = set([1, 1, 2, 2, 3, 3])    # 重复元素在set中自动被过滤
s.add(4)                       # 可以重复添加，但不会有效果
s.remove(4)
s1 = set([1, 2, 3])
s2 = set([2, 3, 4])             # set可以看成数学意义上的无序和无重复元素的集合
s1 & s2                         # 交集
s1 | s2                         # 并集



# 条件判断和循环
age = 3
if age >= 18:                    # 注意不要少写了冒号:
    print 'adult'
elif age >= 6:                   # elif可以省略，也可以重复多个
    print 'teenager'
else:                            # Python没有switch-case
    print 'kid'

x = 1
if x:                             # 简写，只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False
    print 'True'

# 一种是for...in循环，依次把list或tuple中的每个元素迭代出来
names = ['Michael', 'Bob', 'Tracy']
for name in names:
    print name
sum = 0
for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    sum = sum + x
print sum
sum = 0                            # 计算1-100的整数之和
for x in range(101):               # range()函数，可以生成一个整数序列
    sum = sum + x
print sum
# 第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环
sum, n = 0, 99
while n > 0:                       # 计算100以内所有奇数之和
    sum = sum + n
    n = n - 2
print sum
