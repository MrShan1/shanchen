Python是著名的“龟叔”Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。
龟叔给Python的定位是“优雅”、“明确”、“简单”。

用任何编程语言来开发程序，都是为了让计算机干活，比如下载一个MP3，编写一个文档等等，而计算机干活的CPU只认识机器指令，所以，尽管不同的编程语言差异极大，最后都得“翻译”成CPU可以执行的机器指令。而不同的编程语言，干同一个活，编写的代码量，差距也很大。

比如，完成同一个任务，C语言要写1000行代码，Java只需要写100行，而Python可能只要20行。
所以Python是一种相当高级的语言。
代码少的代价是运行速度慢，C程序运行1秒钟，Java程序可能需要2秒，而Python程序可能就需要10秒。

那是不是越低级的程序越难学，越高级的程序越简单？
表面上来说，是的，但是，在非常高的抽象计算中，高级的Python程序设计也是非常难学的，所以，高级程序语言不等于简单。

总的来说，Python的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码。


能干的事情：
可以做日常任务，比如自动备份你的MP3等脚本任务；
可以做网站，很多著名的网站包括YouTube、豆瓣就是Python写的；
可以做网络游戏的后台，很多在线游戏的后台都是Python开发的。
可以把其他语言开发的程序再包装起来，方便使用。
很多大公司，包括Google、Yahoo等，甚至NASA（美国航空航天局）都大量地使用Python。


不能干的事情：
比如写操作系统，这个只能用C语言写；
写手机应用，只能用Objective-C（针对iPhone）和Java（针对Android）；
写3D游戏，最好用C或C++。


优点：
1）简单、易学
Python是一种代表简单主义思想的语言，有简单的语法，容易上手。
Python的这种伪代码本质是它最大的优点之一。
Python使你能够专注于解决问题而不是去搞明白语言本身。
2）面向对象的高层语言
无需关注底层细节，而C/C++中需要操作指针。
与其他语言相比，Python以强大而又简单的方式实现面向对象编程。
3）解释性
Python程序不需要编译成二进制代码，可以直接在源代码上运行。
对于编译性语言（C/C++），源文件->编译/链接器->可执行文件。
4）免费开源，可移植性
Unix衍生系统，Win32系统家族，掌上平台（掌上电脑/手机），游戏控制台（PSP）等等。
5）可扩展性，可嵌入性
如果一段关键代码希望运行得更快，你可以把这部分程序用C或C++编写，然后在Python程序中使用它们。
你可以把Python嵌入到C/C++程序，从而向程序用户提供脚本功能。
6）丰富的库
Python提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。
用Python开发，许多功能不必从零编写，直接使用现成的即可。
除了内置的库外，Python还有大量的高质量的第三方库，如wxPython、Twisted和图像库等等。

缺点：
1）运行速度慢
和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。

但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个下载MP3的网络应用程序，C程序的运行时间需要0.001秒，而Python程序的运行时间需要0.1秒，慢了100倍，但由于网络更慢，需要等待1秒，你想，用户能感觉到1.001秒和1.1秒的区别吗？这就好比F1赛车和普通的出租车在北京三环路上行驶的道理一样，虽然F1赛车理论时速高达400公里，但由于三环路堵车的时速只有20公里，因此，作为乘客，你感觉的时速永远是20公里。

2）代码不能加密
如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。
如果一段关键代码希望运行得更快或者希望算法不公开，你可以把这部分程序用C或C++编写，然后在Python程序中使用它们。

3）其他若干小缺点，请自行忽略，就不一一列举了。



2.x还是3.x

目前，Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的，因为现在Python正在朝着3.x版本进化，在进化过程中，大量的针对2.x版本的代码要修改后才能运行，所以，目前有许多第三方库还暂时无法在3.x上使用。
为了保证你的程序能用到大量的第三方库，我们的教程仍以2.x版本为基础，确切地说，是2.7版本。


在Windows上安装Python

首先，从Python的官方网站python.org下载最新的2.7版本
然后，运行下载的MSI安装包，在选择安装组件的一步时，勾上所有的组件
特别要注意选上pip和Add python.exe to Path，然后一路点“Next”即可完成安装。
默认会安装到C:\Python27目录下，然后打开命令提示符窗口，敲入python后可正常进入Python交互式环境即为安装成功。
安装后，你会得到Python解释器（就是负责运行Python程序的），一个命令行交互环境，还有一个简单的集成开发环境。



解释器
当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。

CPython
当我们从Python官方网站下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。CPython是使用最广的Python解释器。

IPython
IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。
CPython用>>>作为提示符，而IPython用In [序号]:作为提示符。

PyPy
PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。
绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。

Jython
Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。

IronPython
IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。


其他集成开发环境
1）开源
Vim http://www.vim.org/
Sublime Text http://www.sublimetext.com/
Notepad++ https://notepad-plus-plus.org/
Eclipse+PyDev http://www.pydev.org/
2）商业
Wing https://wingware.com/
Komodo http://www.activestate.com/komodo-edit
PyCharm http://www.jetbrains.com/pycharm/