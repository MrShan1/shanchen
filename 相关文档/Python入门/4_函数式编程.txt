# 高阶函数
abs        # 求绝对值的函数
f = abs    # 变量可以指向函数
f          # 变量f现在已指向abs函数本身
f(-10)
abs = 10   # 函数名其实就是指向函数的变量！
abs(-10)   # 实际代码绝对不能这么写
abs = f    # 恢复abs函数
def add(x, y, f):
    # 变量可以指向函数，能接收变量的函参就可以接收另一个函数
    # 简单的高阶函数
    return f(x) + f(y)
add(-5, 6, abs)
# 内置函数map()和reduce()
def f(x):
     return x * x
# map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回
map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])    # 每个元素求平方
map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9])  # 把这个list所有数字转为字符串
L = ['adam', 'LISA', 'barT']           # 变为首字母大写，其他小写的规范名字
map(lambda x: x[0].upper() + x[1:].lower(), L)
# reduce把一个必须接收两个参数的函数作用在一个序列上，依次作用的结果继续和序列的下一个元素做累积计算
def fn(x, y):
    return x * 10 + y
reduce(fn, [1, 3, 5, 7, 9])  # 把序列[1, 3, 5, 7, 9]变换成整数13579
def char2num(s):
    return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
reduce(fn, map(char2num, '13579'))  # 把str转换为int
def str2int(s):
    # 整理成一个str2int的函数
    return reduce(lambda x,y: x*10+y, map(char2num, s))
str2int('6399823')
# 内置的filter()函数用于过滤序列，接收一个函数和一个序列
# 把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
def is_odd(n):
    return n % 2 == 1
filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])  # 删掉偶数，保留奇数
def not_empty(s):
    return s and s.strip()
filter(not_empty, ['A', '', 'B', None, 'C', '  '])  # 把一个序列中的空字符串删掉
# 内置的sorted()函数用于序列排序，可接收一个序列对其进行默认顺序排序
# 还可以接收一个比较函数来实现自定义的排序
sorted([36, 5, 12, 9, 21])  # 默认排序
def reversed_cmp(x, y):
    # 自定义的比较函数，实现倒序排序
    if x > y:
        return -1
    if x < y:
        return 1
    return 0
sorted([36, 5, 12, 9, 21], reversed_cmp)
sorted(['bob', 'about', 'Zoo', 'Credit'])  # 默认排序
def cmp_ignore_case(s1, s2):
    # 实现忽略大小写的排序
    u1 = s1.upper()
    u2 = s2.upper()
    if u1 < u2:
        return -1
    if u1 > u2:
        return 1
    return 0
sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)




# 返回函数
def lazy_sum(*args):
    # 内部函数
    def sum():
        ax = 0
        # 在其定义内部引用了局部变量args
        for n in args:
            ax = ax + n
        return ax
    # 函数作为返回值，其内部的局部变量args还被新函数引用
    # 称为“闭包（Closure）”的程序结构
    return sum
f = lazy_sum(1, 3, 5, 7, 9)
f    # 返回的并不是求和结果，而是求和函数
f()  # 调用函数f时，才真正计算求和的结果
f1 = lazy_sum(1, 3, 5, 7, 9)  # 每次调用都会返回一个新的函数
f2 = lazy_sum(1, 3, 5, 7, 9)  # 传入相同的参数
f1==f2                        # 调用结果互不影响
def count():
    fs = []
    for i in range(1, 4):
        def f():
             # 返回函数尽量不要引用任何循环变量，或者后续会发生变化的变量
             return i*i
        fs.append(f)
    return fs
f1, f2, f3 = count()
print f1(), f2(), f3()
def count():
     fs = []
     for i in range(1, 4):
         # 一定要引用循环变量的方法是再创建一个函数
         # 用该函数的参数绑定循环变量当前的值
         # 无论该循环变量后续如何更改，已绑定到函数参数的值不变
         def f(j):
             def g():
                 return j*j
             return g
         fs.append(f(i))
     return fs
f1, f2, f3 = count()
print f1(), f2(), f3()



# 匿名函数
map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])
f = lambda x: x * x  # 关键字lambda表示匿名函数，冒号前面的x表示函数参数
f                  # 匿名函数限制只能有一个表达式，返回值就是该表达式的结果
f(5)
def build(x, y):
    # 把匿名函数作为返回值返回
    return lambda: x * x + y * y
def count():
     fs = []
     for i in range(1, 4):
         # 匿名函数简化闭包
         f = lambda j: lambda: j*j
         fs.append(f(i))
     return fs



# 装饰器
def now():
    print '2013-12-25'
f = now
f()
print now.__name__, f.__name__  # 函数对象的__name__属性，可以拿到函数的名字
# 假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，
# 但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”
import functools
def log(arg=None):
    # 带参数的装饰器
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            text = arg if isinstance(arg, str) else 'module'
            print("before %s called [%s]." % (func.__name__, text))
            ret = func(*args, **kw)
            print("after %s called [%s]. result: %s" % (func.__name__, text, ret))
            return ret
        return wrapper
    if callable(arg):
        return decorator(arg)
    return decorator
@log    # 相当于now = log()(now)
def now():
    print '2013-12-25'
@log('my_module_111')   # 相当于now = log('execute')(now)
def now():
    print '2013-12-25'



# 偏函数
int('12345')
int('12345', base=8)
int('12345', 16)
import functools
# 把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数
int2 = functools.partial(int, base=2)
int2('1000000')   # 相当于int('10010', **{ base: 2 })
int2('1000000', base=10)  # 也可以在函数调用时传入其他值
max2 = functools.partial(max, 10)
max2(5, 6, 7)     # 相当于max(*(10, 5, 6, 7))